!function(){"use strict";function e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function t(t){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?e(Object(o),!0).forEach((function(e){n(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):e(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t,this._authKey=n}var n,o;return n=e,o=[{key:"getAllCards",value:function(){return this._sendRequest("GET","/cards").then(this._checkResponse)}},{key:"addCard",value:function(e){var t=e.name,n=e.link;return this._sendRequest("POST","/cards",{body:JSON.stringify({name:t,link:n})}).then(this._checkResponse)}},{key:"deleteCard",value:function(e){return this._sendRequest("DELETE","/cards/"+e).then(this._checkResponse)}},{key:"likeCard",value:function(e){return this._sendRequest("PUT","/cards/likes/"+e).then(this._checkResponse)}},{key:"dislikeCard",value:function(e){return this._sendRequest("DELETE","/cards/likes/"+e).then(this._checkResponse)}},{key:"getUserInfo",value:function(){return this._sendRequest("GET","/users/me").then(this._checkResponse)}},{key:"updateUserInfo",value:function(e){var t=e.name,n=e.about;return this._sendRequest("PATCH","/users/me",{body:JSON.stringify({name:t,about:n})}).then(this._checkResponse)}},{key:"updateUserAvatar",value:function(e){var t=e.avatar;return this._sendRequest("PATCH","/users/me/avatar",{body:JSON.stringify({avatar:t})}).then(this._checkResponse)}},{key:"_sendRequest",value:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return fetch(this._baseUrl+n,t({method:e,headers:{Authorization:this._authKey,"Content-Type":"application/json"}},r))}},{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("An error occurred: ".concat(e.status," ").concat(e.statusText))}}],o&&r(n.prototype,o),e}(),i=o;function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(t,n,r,o){var i=t._id,a=t.name,u=t.link,s=t.likes,c=t.owner,f=r.handleImageClick,h=r.handleLikeClick,d=r.handleRemoveClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),l(this,"_cardSelector",".card"),l(this,"_titleSelector",".card__title"),l(this,"_imageSelector",".card__image"),l(this,"_likeButtonSelector",".card__like-button"),l(this,"_likeCounterSelector",".card__like-counter"),l(this,"_removeButtonSelector",".card__remove-button"),l(this,"_likeButtonActiveClass","card__like-button_active"),this._id=i,this._name=a,this._link=u,this._likes=s,this._owner=c,this._templateSelector=n,this._handleImageClick=f,this._handleLikeClick=h,this._handleRemoveClick=d,this._userId=o}var t,n;return t=e,n=[{key:"generateElement",value:function(){return this._createFromTemplate(),this._setEventListeners(),this._checkPermissions(),this.updateLikes(),this._titleElement.textContent=this._name,this._imageElement.alt=this._name,this._imageElement.src=this._link,this._cardElement}},{key:"removeElement",value:function(){this._cardElement.remove()}},{key:"updateLikes",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.likes;this._likes=t||this._likes,this._isLiked()?this._markLiked():this._markDisliked(),this._likeCounterElement.textContent=this._likes.length}},{key:"_createFromTemplate",value:function(){this._cardElement=document.querySelector(this._templateSelector).content.querySelector(this._cardSelector).cloneNode(!0),this._titleElement=this._cardElement.querySelector(this._titleSelector),this._imageElement=this._cardElement.querySelector(this._imageSelector),this._likeButtonElement=this._cardElement.querySelector(this._likeButtonSelector),this._likeCounterElement=this._cardElement.querySelector(this._likeCounterSelector),this._removeButtonElement=this._cardElement.querySelector(this._removeButtonSelector)}},{key:"_setEventListeners",value:function(){var e=this;this._imageElement.addEventListener("click",this._handleImageClick),this._likeButtonElement.addEventListener("click",(function(){return e._handleLikeClick(e._id,e._isLiked())})),this._removeButtonElement.addEventListener("click",(function(){return e._handleRemoveClick(e._id)}))}},{key:"_checkPermissions",value:function(){this._owner._id!==this._userId&&this._removeButtonElement.remove()}},{key:"_isLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"_markLiked",value:function(){this._likeButtonElement.classList.add(this._likeButtonActiveClass)}},{key:"_markDisliked",value:function(){this._likeButtonElement.classList.remove(this._likeButtonActiveClass)}}],n&&a(t.prototype,n),e}(),s=u;function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,"_backgroundClass","dialogue"),f(this,"_closeButtonClass","dialogue__close-button"),f(this,"_openedClass","dialogue_opened"),this._dialogueElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._handleClickClose=this._handleClickClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._dialogueElement.classList.add(this._openedClass),this.setEventListeners()}},{key:"close",value:function(){this._dialogueElement.classList.remove(this._openedClass),this.removeEventListeners()}},{key:"setEventListeners",value:function(){document.addEventListener("keydown",this._handleEscClose),this._dialogueElement.addEventListener("click",this._handleClickClose)}},{key:"removeEventListeners",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._dialogueElement.removeEventListener("click",this._handleClickClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleClickClose",value:function(e){(e.target.classList.contains(this._backgroundClass)||e.target.classList.contains(this._closeButtonClass))&&this.close()}}])&&c(t.prototype,n),e}();function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _(){return _="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=p(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},_.apply(this,arguments)}function p(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=k(e)););return e}function y(e,t){return y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},y(e,t)}function v(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e){return k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},k(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return v(this,e)});function a(e){var t,n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),o=".dialogue__submit-button",(r="_buttonSelector")in(n=b(t=i.call(this,e)))?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,t._buttonElement=t._dialogueElement.querySelector(t._buttonSelector),t}return t=a,(n=[{key:"open",value:function(e){this._confirmationCallback=e,_(k(a.prototype),"open",this).call(this)}},{key:"setEventListeners",value:function(){_(k(a.prototype),"setEventListeners",this).call(this),this._buttonElement.addEventListener("click",this._confirmationCallback)}},{key:"removeEventListeners",value:function(){_(k(a.prototype),"removeEventListeners",this).call(this),this._buttonElement.removeEventListener("click",this._confirmationCallback)}}])&&m(t.prototype,n),a}(h);function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=w(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},O.apply(this,arguments)}function w(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}function C(e,t){return C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},C(e,t)}function L(e,t){if(t&&("object"===E(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return j(e)}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}function R(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=P(r);if(o){var n=P(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),R(j(n=i.call(this,e)),"_formSelector",".dialogue__form"),R(j(n),"_buttonSelector",".dialogue__submit-button"),n._formElement=n._dialogueElement.querySelector(n._formSelector),n._buttonElement=n._dialogueElement.querySelector(n._buttonSelector),n._submissionCallback=t,n._handleFormSubmission=n._handleFormSubmission.bind(j(n)),n}return t=a,(n=[{key:"close",value:function(){O(P(a.prototype),"close",this).call(this),this._formElement.reset()}},{key:"setInputValues",value:function(e){for(var t in e)this._formElement.elements[t]&&(this._formElement.elements[t].value=e[t])}},{key:"setLoadingState",value:function(e){this._buttonElement.textContent=e?"Saving...":"Save"}},{key:"setEventListeners",value:function(){O(P(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",this._handleFormSubmission)}},{key:"removeEventListeners",value:function(){O(P(a.prototype),"removeEventListeners",this).call(this),this._formElement.removeEventListener("submit",this._handleFormSubmission)}},{key:"_handleFormSubmission",value:function(e){e.preventDefault(),this._submissionCallback(this._getInputValues())}},{key:"_getInputValues",value:function(){return this._formElement.elements}}])&&S(t.prototype,n),a}(h);function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(){return D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=x(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},D.apply(this,arguments)}function x(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=F(e)););return e}function U(e,t){return U=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},U(e,t)}function A(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return V(e)}function V(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function F(e){return F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},F(e)}function N(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&U(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=F(r);if(o){var n=F(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function a(){var e;q(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return N(V(e=i.call.apply(i,[this].concat(n))),"_imageSelector",".dialogue__image"),N(V(e),"_captionSelector",".dialogue__caption"),e}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;D(F(a.prototype),"open",this).call(this);var r=this._dialogueElement.querySelector(this._imageSelector);r.alt=t,r.src=n,this._dialogueElement.querySelector(this._captionSelector).textContent=t}}])&&T(t.prototype,n),a}(h),J=z;function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var H=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=t,this._validationSettings=n}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){var e=this;this._analyzeForm(),this._toggleSubmitButtonState(),this._inputsList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleSubmitButtonState()}))})),this._formElement.addEventListener("reset",(function(){return e._makeSubmitButtonDisabled()}))}},{key:"_analyzeForm",value:function(){this._inputsList=Array.from(this._formElement.querySelectorAll(this._validationSettings.inputSelector)),this._submitButtonElement=this._formElement.querySelector(this._validationSettings.submitButtonSelector)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var n=this._getInputErrorElement(e);e.classList.add(this._validationSettings.inputErrorClass),n.classList.add(this._validationSettings.errorVisibleClass),n.textContent=t}},{key:"_hideInputError",value:function(e){var t=this._getInputErrorElement(e);e.classList.remove(this._validationSettings.inputErrorClass),t.classList.remove(this._validationSettings.errorVisibleClass),t.textContent=null}},{key:"_getInputErrorElement",value:function(e){var t=this._validationSettings.inputErrorSelector.replace("%formId",this._formElement.id).replace("%inputName",e.name);return this._formElement.querySelector(t)}},{key:"_toggleSubmitButtonState",value:function(){this._hasInvalidInput()?this._makeSubmitButtonDisabled():this._makeSubmitButtonActive()}},{key:"_hasInvalidInput",value:function(){return this._inputsList.some((function(e){return!e.validity.valid}))}},{key:"_makeSubmitButtonActive",value:function(){this._submitButtonElement.classList.remove(this._validationSettings.inactiveButtonClass),this._submitButtonElement.disabled=!1}},{key:"_makeSubmitButtonDisabled",value:function(){this._submitButtonElement.classList.add(this._validationSettings.inactiveButtonClass),this._submitButtonElement.disabled=!0}}])&&G(t.prototype,n),e}(),K=H;function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Q=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._containerElement=document.querySelector(t),this._rendererCallback=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){return t._rendererCallback(e)}))}},{key:"addElementFirst",value:function(e){this._containerElement.prepend(e)}},{key:"addElementLast",value:function(e){this._containerElement.append(e)}}])&&M(t.prototype,n),e}();function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var X=function(){function e(t){var n,r=t.nameSelector,o=t.aboutSelector,i=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=void 0,"_id"in this?Object.defineProperty(this,"_id",{value:n,enumerable:!0,configurable:!0,writable:!0}):this._id=n,this._nameElement=document.querySelector(r),this._aboutElement=document.querySelector(o),this._avatarElement=document.querySelector(i)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{id:this._id,name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}},{key:"setUserInfo",value:function(e){var t=e._id,n=e.name,r=e.about,o=e.avatar;this._id=t||this._id,this._nameElement.textContent=n,this._aboutElement.textContent=r,this._avatarElement.src=o}}])&&W(t.prototype,n),e}(),Y="error_visible",Z={formSelector:".dialogue__form",inputSelector:".dialogue__form-field",inputErrorSelector:".%formId-%inputName-error",submitButtonSelector:".dialogue__submit-button",inactiveButtonClass:"dialogue__submit-button_disabled",inputErrorClass:"dialogue__form-field_has-error",errorVisibleClass:"dialogue__form-error_visible"};function $(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ee(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$(Object(n),!0).forEach((function(t){te(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ne=new i("https://around.nomoreparties.co/v1/group-12","190e9486-cf84-4370-aa42-80831152ad82"),re=new Q(".cards__list",(function(e){return re.addElementLast(fe(e))})),oe=new I(".dialogue_type_card-add",(function(e){oe.setLoadingState(!0),ne.addCard({name:e.title.value,link:e.image.value}).then((function(e){return re.addElementFirst(fe(e))})).catch(ce).finally((function(){oe.close(),oe.setLoadingState(!1)}))})),ie=new g(".dialogue_type_card-remove"),ae=new J(".dialogue_type_card-view"),le=new I(".dialogue_type_profile-change-picture",(function(e){le.setLoadingState(!0),ne.updateUserAvatar({avatar:e.avatar.value}).then((function(e){return se.setUserInfo(e)})).catch(ce).finally((function(){le.close(),le.setLoadingState(!1)}))})),ue=new I(".dialogue_type_profile-edit",(function(e){ue.setLoadingState(!0),ne.updateUserInfo({name:e.name.value,about:e.about.value}).then((function(e){return se.setUserInfo(e)})).catch(ce).finally((function(){ue.close(),ue.setLoadingState(!1)}))})),se=new X({nameSelector:".profile__title-text",aboutSelector:".profile__subtitle",avatarSelector:".profile__avatar-image"}),ce=function(e){var t=document.querySelector(".error");t.textContent=e,t.classList.add(Y),setTimeout((function(){return t.classList.remove(Y)}),5e3),console.error(e)},fe=function(e){var t=new s(e,"#card-template",{handleImageClick:function(){return ae.open(e)},handleLikeClick:function(e,n){n?ne.dislikeCard(e).then((function(e){return t.updateLikes(e)})).catch(ce):ne.likeCard(e).then((function(e){return t.updateLikes(e)})).catch(ce)},handleRemoveClick:function(e){ie.open((function(){ne.deleteCard(e).then((function(){return t.removeElement()})).catch(ce).finally((function(){return ie.close()}))}))}},se.getUserInfo().id);return t.generateElement()};document.querySelector(".profile__add-button").addEventListener("click",(function(){return oe.open()})),document.querySelector(".profile__avatar-overlay").addEventListener("click",(function(){le.setInputValues(se.getUserInfo()),le.open()})),document.querySelector(".profile__edit-button").addEventListener("click",(function(){ue.setInputValues(se.getUserInfo()),ue.open()})),se.setUserInfo(ee(ee({},se.getUserInfo()),{},{name:"Loading..."})),Promise.all([ne.getUserInfo(),ne.getAllCards()]).then((function(e){se.setUserInfo(e[0]),re.renderItems(e[1])})).catch(ce),Array.from(document.querySelectorAll(Z.formSelector)).forEach((function(e){new K(e,Z).enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,