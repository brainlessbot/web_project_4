!function(){"use strict";function e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function t(t){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?e(Object(o),!0).forEach((function(e){n(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):e(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t,this._authKey=n}var n,o;return n=e,o=[{key:"getAllCards",value:function(){return this._sendRequest("GET","/cards")}},{key:"addCard",value:function(e){var t=e.name,n=e.link;return this._sendRequest("POST","/cards",{body:JSON.stringify({name:t,link:n})})}},{key:"deleteCard",value:function(e){return this._sendRequest("DELETE","/cards/"+e)}},{key:"likeCard",value:function(e){return this._sendRequest("PUT","/cards/likes/"+e)}},{key:"dislikeCard",value:function(e){return this._sendRequest("DELETE","/cards/likes/"+e)}},{key:"getUserInfo",value:function(){return this._sendRequest("GET","/users/me")}},{key:"updateUserInfo",value:function(e){var t=e.name,n=e.about;return this._sendRequest("PATCH","/users/me",{body:JSON.stringify({name:t,about:n})})}},{key:"updateUserAvatar",value:function(e){var t=e.avatar;return this._sendRequest("PATCH","/users/me/avatar",{body:JSON.stringify({avatar:t})})}},{key:"_sendRequest",value:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return fetch(this._baseUrl+n,t({method:e,headers:{Authorization:this._authKey,"Content-Type":"application/json"}},r)).then(this._checkResponse)}},{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("An error occurred: ".concat(e.status," ").concat(e.statusText))}}],o&&r(n.prototype,o),e}(),i=o;function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(t,n,r,o){var i=t._id,a=t.name,u=t.link,c=t.likes,s=t.owner,f=r.handleImageClick,h=r.handleLikeClick,d=r.handleRemoveClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),l(this,"_cardSelector",".card"),l(this,"_titleSelector",".card__title"),l(this,"_imageSelector",".card__image"),l(this,"_likeButtonSelector",".card__like-button"),l(this,"_likeCounterSelector",".card__like-counter"),l(this,"_removeButtonSelector",".card__remove-button"),l(this,"_likeButtonActiveClass","card__like-button_active"),this._id=i,this._name=a,this._link=u,this._likes=c,this._owner=s,this._templateSelector=n,this._handleImageClick=f,this._handleLikeClick=h,this._handleRemoveClick=d,this._userId=o}var t,n;return t=e,n=[{key:"generateElement",value:function(){return this._createFromTemplate(),this._setEventListeners(),this._checkPermissions(),this.updateLikes(),this._titleElement.textContent=this._name,this._imageElement.alt=this._name,this._imageElement.src=this._link,this._cardElement}},{key:"removeElement",value:function(){this._cardElement.remove()}},{key:"updateLikes",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.likes;this._likes=t||this._likes,this._isLiked()?this._markLiked():this._markDisliked(),this._likeCounterElement.textContent=this._likes.length}},{key:"_createFromTemplate",value:function(){this._cardElement=document.querySelector(this._templateSelector).content.querySelector(this._cardSelector).cloneNode(!0),this._titleElement=this._cardElement.querySelector(this._titleSelector),this._imageElement=this._cardElement.querySelector(this._imageSelector),this._likeButtonElement=this._cardElement.querySelector(this._likeButtonSelector),this._likeCounterElement=this._cardElement.querySelector(this._likeCounterSelector),this._removeButtonElement=this._cardElement.querySelector(this._removeButtonSelector)}},{key:"_setEventListeners",value:function(){var e=this;this._imageElement.addEventListener("click",this._handleImageClick),this._likeButtonElement.addEventListener("click",(function(){return e._handleLikeClick(e._id,e._isLiked())})),this._removeButtonElement.addEventListener("click",(function(){return e._handleRemoveClick(e._id)}))}},{key:"_checkPermissions",value:function(){this._owner._id!==this._userId&&this._removeButtonElement.remove()}},{key:"_isLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"_markLiked",value:function(){this._likeButtonElement.classList.add(this._likeButtonActiveClass)}},{key:"_markDisliked",value:function(){this._likeButtonElement.classList.remove(this._likeButtonActiveClass)}}],n&&a(t.prototype,n),e}(),c=u;function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,"_backgroundClass","dialogue"),f(this,"_closeButtonClass","dialogue__close-button"),f(this,"_openedClass","dialogue_opened"),this._dialogueElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._handleClickClose=this._handleClickClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._dialogueElement.classList.add(this._openedClass),this.setEventListeners()}},{key:"close",value:function(){this._dialogueElement.classList.remove(this._openedClass),this.removeEventListeners()}},{key:"setEventListeners",value:function(){document.addEventListener("keydown",this._handleEscClose),this._dialogueElement.addEventListener("click",this._handleClickClose)}},{key:"removeEventListeners",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._dialogueElement.removeEventListener("click",this._handleClickClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleClickClose",value:function(e){(e.target.classList.contains(this._backgroundClass)||e.target.classList.contains(this._closeButtonClass))&&this.close()}}])&&s(t.prototype,n),e}();function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(){return m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=_(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},m.apply(this,arguments)}function _(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=g(e)););return e}function y(e,t){return y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},y(e,t)}function v(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}var E=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=g(r);if(o){var n=g(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return v(this,e)});function a(e){var t,n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),o=".dialogue__submit-button",(r="_buttonSelector")in(n=b(t=i.call(this,e)))?Object.defineProperty(n,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[r]=o,t._buttonElement=t._dialogueElement.querySelector(t._buttonSelector),t}return t=a,(n=[{key:"open",value:function(e){this._confirmationCallback=e,m(g(a.prototype),"open",this).call(this)}},{key:"setEventListeners",value:function(){m(g(a.prototype),"setEventListeners",this).call(this),this._buttonElement.addEventListener("click",this._confirmationCallback)}},{key:"removeEventListeners",value:function(){m(g(a.prototype),"removeEventListeners",this).call(this),this._buttonElement.removeEventListener("click",this._confirmationCallback)}}])&&p(t.prototype,n),a}(h);function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=w(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},O.apply(this,arguments)}function w(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=L(e)););return e}function C(e,t){return C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},C(e,t)}function j(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return P(e)}function P(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function L(e){return L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},L(e)}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=L(r);if(o){var n=L(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return j(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),I(P(t=i.call(this,e)),"_hideAfterSeconds",5),I(P(t),"_paragraphSelector",".dialogue__paragraph_primary"),I(P(t),"_counterSelector",".dialogue__counter"),t._paragraphElement=t._dialogueElement.querySelector(t._paragraphSelector),t._counterElement=t._dialogueElement.querySelector(t._counterSelector),t}return t=a,(n=[{key:"open",value:function(e){var t=this;O(L(a.prototype),"open",this).call(this),this._clearCounter(),this._paragraphElement.textContent=e,this._counterElement.textContent=this._hideAfterSeconds,this._intervalId=setInterval((function(){t._counterElement.textContent-=1}),1e3),this._timeoutId=setTimeout((function(){return t.close()}),1e3*this._hideAfterSeconds),console.error(e)}},{key:"close",value:function(){O(L(a.prototype),"close",this).call(this),this._clearCounter()}},{key:"_clearCounter",value:function(){this._intervalId&&clearInterval(this._intervalId),this._timeoutId&&clearTimeout(this._timeoutId)}}])&&S(t.prototype,n),a}(h);function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(){return T="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=A(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},T.apply(this,arguments)}function A(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=F(e)););return e}function x(e,t){return x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},x(e,t)}function D(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return U(e)}function U(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function F(e){return F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},F(e)}function V(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=F(r);if(o){var n=F(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return D(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),V(U(n=i.call(this,e)),"_formSelector",".dialogue__form"),V(U(n),"_buttonSelector",".dialogue__submit-button"),n._formElement=n._dialogueElement.querySelector(n._formSelector),n._buttonElement=n._dialogueElement.querySelector(n._buttonSelector),n._submissionCallback=t,n._handleFormSubmission=n._handleFormSubmission.bind(U(n)),n}return t=a,(n=[{key:"close",value:function(){T(F(a.prototype),"close",this).call(this),this._formElement.reset()}},{key:"setInputValues",value:function(e){for(var t in e)this._formElement.elements[t]&&(this._formElement.elements[t].value=e[t])}},{key:"setLoadingState",value:function(e){this._buttonElement.textContent=e?"Saving...":"Save"}},{key:"setEventListeners",value:function(){T(F(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",this._handleFormSubmission)}},{key:"removeEventListeners",value:function(){T(F(a.prototype),"removeEventListeners",this).call(this),this._formElement.removeEventListener("submit",this._handleFormSubmission)}},{key:"_handleFormSubmission",value:function(e){e.preventDefault(),this._submissionCallback(this._getInputValues())}},{key:"_getInputValues",value:function(){var e=Array.from(this._formElement.elements),t={};return e.forEach((function(e){t[e.name]=e.value})),t}}])&&q(t.prototype,n),a}(h);function z(e){return z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},z(e)}function J(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function G(){return G="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=H(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},G.apply(this,arguments)}function H(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Q(e)););return e}function K(e,t){return K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},K(e,t)}function M(e,t){if(t&&("object"===z(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return $(e)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Q(e){return Q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Q(e)}function W(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var X=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Q(r);if(o){var n=Q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return M(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),W($(t=i.call(this,e)),"_imageSelector",".dialogue__image"),W($(t),"_captionSelector",".dialogue__caption"),t._imageElement=t._dialogueElement.querySelector(t._imageSelector),t._captionElement=t._dialogueElement.querySelector(t._captionSelector),t}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;G(Q(a.prototype),"open",this).call(this),this._imageElement.alt=t,this._imageElement.src=n,this._captionElement.textContent=t}}])&&J(t.prototype,n),a}(h);function Y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Z=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=t,this._validationSettings=n}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){var e=this;this._analyzeForm(),this._toggleSubmitButtonState(),this._inputsList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleSubmitButtonState()}))})),this._formElement.addEventListener("reset",(function(){return e._makeSubmitButtonDisabled()}))}},{key:"_analyzeForm",value:function(){this._inputsList=Array.from(this._formElement.querySelectorAll(this._validationSettings.inputSelector)),this._submitButtonElement=this._formElement.querySelector(this._validationSettings.submitButtonSelector)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var n=this._getInputErrorElement(e);e.classList.add(this._validationSettings.inputErrorClass),n.classList.add(this._validationSettings.errorVisibleClass),n.textContent=t}},{key:"_hideInputError",value:function(e){var t=this._getInputErrorElement(e);e.classList.remove(this._validationSettings.inputErrorClass),t.classList.remove(this._validationSettings.errorVisibleClass),t.textContent=null}},{key:"_getInputErrorElement",value:function(e){var t=this._validationSettings.inputErrorSelector.replace("%formId",this._formElement.id).replace("%inputName",e.name);return this._formElement.querySelector(t)}},{key:"_toggleSubmitButtonState",value:function(){this._hasInvalidInput()?this._makeSubmitButtonDisabled():this._makeSubmitButtonActive()}},{key:"_hasInvalidInput",value:function(){return this._inputsList.some((function(e){return!e.validity.valid}))}},{key:"_makeSubmitButtonActive",value:function(){this._submitButtonElement.classList.remove(this._validationSettings.inactiveButtonClass),this._submitButtonElement.disabled=!1}},{key:"_makeSubmitButtonDisabled",value:function(){this._submitButtonElement.classList.add(this._validationSettings.inactiveButtonClass),this._submitButtonElement.disabled=!0}}])&&Y(t.prototype,n),e}(),ee=Z;function te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ne=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._containerElement=document.querySelector(t),this._rendererCallback=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){return t._rendererCallback(e)}))}},{key:"addElementFirst",value:function(e){this._containerElement.prepend(e)}},{key:"addElementLast",value:function(e){this._containerElement.append(e)}}])&&te(t.prototype,n),e}();function re(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var oe=function(){function e(t){var n,r=t.nameSelector,o=t.aboutSelector,i=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=void 0,"_id"in this?Object.defineProperty(this,"_id",{value:n,enumerable:!0,configurable:!0,writable:!0}):this._id=n,this._nameElement=document.querySelector(r),this._aboutElement=document.querySelector(o),this._avatarElement=document.querySelector(i)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{id:this._id,name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}},{key:"setUserInfo",value:function(e){var t=e._id,n=e.name,r=e.about,o=e.avatar;this._id=t||this._id,this._nameElement.textContent=n,this._aboutElement.textContent=r,this._avatarElement.src=o}}])&&re(t.prototype,n),e}(),ie={formSelector:".dialogue__form",inputSelector:".dialogue__form-field",inputErrorSelector:".%formId-%inputName-error",submitButtonSelector:".dialogue__submit-button",inactiveButtonClass:"dialogue__submit-button_disabled",inputErrorClass:"dialogue__form-field_has-error",errorVisibleClass:"dialogue__form-error_visible"};function ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ue(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?le(Object(n),!0).forEach((function(t){ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):le(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ce(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var se=new i("https://around.nomoreparties.co/v1/group-12","190e9486-cf84-4370-aa42-80831152ad82"),fe=new ne(".cards__list",(function(e){return fe.addElementLast(be(e))})),he=new N(".dialogue_type_card-add",(function(e){he.setLoadingState(!0),se.addCard(e).then((function(e){fe.addElementFirst(be(e)),he.close()})).catch((function(e){return me.open(e)})).finally((function(){return he.setLoadingState(!1)}))})),de=new E(".dialogue_type_card-remove"),pe=new X(".dialogue_type_card-view"),me=new R(".dialogue_type_error"),_e=new N(".dialogue_type_profile-change-picture",(function(e){_e.setLoadingState(!0),se.updateUserAvatar(e).then((function(e){ve.setUserInfo(e),_e.close()})).catch((function(e){return me.open(e)})).finally((function(){return _e.setLoadingState(!1)}))})),ye=new N(".dialogue_type_profile-edit",(function(e){ye.setLoadingState(!0),se.updateUserInfo(e).then((function(e){ve.setUserInfo(e),ye.close()})).catch((function(e){return me.open(e)})).finally((function(){return ye.setLoadingState(!1)}))})),ve=new oe({nameSelector:".profile__title-text",aboutSelector:".profile__subtitle",avatarSelector:".profile__avatar-image"}),be=function(e){var t=new c(e,"#card-template",{handleImageClick:function(){return pe.open(e)},handleLikeClick:function(e,n){n?se.dislikeCard(e).then((function(e){return t.updateLikes(e)})).catch((function(e){return me.open(e)})):se.likeCard(e).then((function(e){return t.updateLikes(e)})).catch((function(e){return me.open(e)}))},handleRemoveClick:function(e){de.open((function(){se.deleteCard(e).then((function(){t.removeElement(),de.close()})).catch((function(e){return me.open(e)}))}))}},ve.getUserInfo().id);return t.generateElement()};document.querySelector(".profile__add-button").addEventListener("click",(function(){return he.open()})),document.querySelector(".profile__avatar-overlay").addEventListener("click",(function(){return _e.open()})),document.querySelector(".profile__edit-button").addEventListener("click",(function(){ye.setInputValues(ve.getUserInfo()),ye.open()})),ve.setUserInfo(ue(ue({},ve.getUserInfo()),{},{name:"Loading..."})),Promise.all([se.getUserInfo(),se.getAllCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ae(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];ve.setUserInfo(o),fe.renderItems(i)})).catch((function(e){return me.open(e)})),Array.from(document.querySelectorAll(ie.formSelector)).forEach((function(e){new ee(e,ie).enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,